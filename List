#include <iostream>
#include <Windows.h>
													
class dlinkedlist {										
														
private:												
	struct node {										
		int value = NULL;	//0							
		node*prev = nullptr;//null						
		node*next = nullptr;//null						
	};													
	unsigned int count;									
	node* head;											
	node* tail;											
	bool is_empty();
public:
	dlinkedlist() :head(nullptr), tail(nullptr), count(0) {} //конструктор и параметр по умолчанию
	~dlinkedlist() {}
	int* pop_back();  //удалить из конца
	int* pop_front(); //удалить из головы
	void push_back(int item); //добавить в конец
	void push_front(int item);//добавить к голове
	void reverse(); //переворот с двойным тулупом (изменяет порядок элементов во всем списке на обратный)
	void erase(int pos); //удаляет элемент из коллекции указанному индексу
	void changeEl(int item, int pos); //замена элемента
	void insert(int item, int pos);//вставляет элемент в коллекцию  по указанному индексу
	void printlist();
};
inline void dlinkedlist::push_back(int item) {
	node*tmp = new node();
	tmp->next = nullptr;			//class.metod
									//если метод указатель то надо его разыменовать
									//class->metod
	tmp->value = item;
	if (head != nullptr) { tmp->prev = tail; tail->next = tmp; tail = tmp; count++; }
	else { tmp->prev = nullptr; head = tail = tmp; count++; }
}
inline void dlinkedlist::push_front(int item) {
	node*tmp = new node();
	tmp->prev = nullptr;
	tmp->value = item;
	if (head != nullptr) { tmp->next = head; head->prev = tmp; head = tmp; count++; }
	else { tmp->next = nullptr; head = tail = tmp; count++; };
}
//remove back element form list
inline int*  dlinkedlist::pop_back() {
	if (!is_empty()) {
		int* tmp_val = new int(tail->value);
		node* tmp_tail(tail);
		tail = tail->prev;
		delete tmp_tail;
		return tmp_val;
	}
	return nullptr;
}
//remove front element from list
inline int*	 dlinkedlist::pop_front() {
	if (!is_empty()) {
		int* tmp_val = new int(head->value);
		node* tmp_head = head;
		head = head->next;
		delete tmp_head;
		return tmp_val;
	}
}
inline bool dlinkedlist::is_empty() {
	return !head;
}
inline void dlinkedlist::reverse() {
	node *iter = head;
	node *temp = NULL;

	while (iter != NULL)
	{
		// меняем местами предыдущий / следующий указатель
		temp = iter->prev;
		iter->prev = iter->next;
		iter->next = temp;
		iter = iter->prev;
	}
	// поменяв все ссылки, нужно поменять голову и хвост
	temp = head;
	head = tail;
	tail = temp;
}
inline void dlinkedlist::erase(int pos) {
	node* tmp_tail(tail);
	int tmp_count(count);
	if (pos > tmp_count) { std::cout << "Input error" << std::endl; }
	else {
		if (tmp_count == pos) { pop_back(); }
		if (tmp_count == 1) { pop_front(); }
		if (!is_empty()) {
			while (pos < tmp_count) {
				tmp_tail = tmp_tail->prev;
				tmp_count--;
			}
			node* beforeDel = tmp_tail->prev;
			node* afterDel = tmp_tail->next;
			beforeDel->next = afterDel;
			afterDel->prev = beforeDel;
			count--;
			delete tmp_tail;
		}
	}
}
// change element on pos (item,pos);
inline void dlinkedlist::changeEl(int item, int pos) {
	node* tmp(tail);
	int tmp_c(count);
	if (pos > tmp_c) { std::cout << "Input error" << std::endl; }
	else {
		if (pos == tmp_c) { tail->value = item; }
		if (pos == 0) { head->value = item; }
		if (pos < tmp_c) {
			while (pos < tmp_c) {
				tmp = tmp->prev;
				tmp_c--;
			}
			tmp->value = item;
		}
	}
}
inline void dlinkedlist::insert(int item, int pos) {
	node* tmp_1 = tail;
	int tmp_c = count;
	if (pos == tmp_c) { push_back(item); }
	if (pos == 1) { push_front(item); }
	if (pos > tmp_c) { std::cout << "Input error" << std::endl; }
	else {
		if (pos < tmp_c) {
			while (pos < tmp_c) {
				tmp_1 = tmp_1->prev;
				tmp_c--;
			}
			node* prevIns = tmp_1->prev;
			node* tmp_2 = new node();
			tmp_2->value = item;
			tmp_2->next = tmp_1;
			tmp_2->prev = prevIns;
			tmp_1->prev = tmp_2;
			count++;
		}
	}
}
inline void dlinkedlist::printlist() {
	node* tmp_tail(tail);
	int tmp_count(count);
	std::cout << tail->value;
	while (tmp_count != 0)
	{
		tmp_tail = tmp_tail->prev;
		if (tmp_tail == nullptr) break;
		std::cout << std::endl;
		std::cout << tmp_tail->value << std::endl;
		tmp_count--;
	}
}
